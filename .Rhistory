confs
confs$East
confs$teamconf
which("Boston Celics" %in% confs)
teamconf
?get
get(teamconf)
teamconf <- teams$Conference_id[which(teams$Team_Name == teamName)]
simSeason <- subset(games,(games$Date > currentDay) & (games$`Home Team` %in% get(teamconf) |
games$`Away Team` %in% get(teamconf)))
View(simSeason)
View(simSeason)
simSeason$Winner[which(simSeason$`Home Team` == teamName | simSeason$`Away Team` == teamName)] <- teamName
View(simSeason)
simSeason$Winner[eastvwest] <- c(simSeason$`Home Team`,simSeason$`Away Team`) %in% get(teamconf)
View(simSeason)
simSeason$Winner[eastvwest] <- c(simSeason$`Home Team`[eastvwest],simSeason$`Away Team`[eastvwest]) %in% get(teamconf)
View(simSeason)
simSeason$Winner[eastvwest]
eastvwest <- which((simSeason$`Home Team` %in% East & simSeason$`Away Team` %in% West) |
(simSeason$`Home Team` %in% West & simSeason$`Away Team` %in% East))
simSeason$Winner[eastvwest] <- c(simSeason$`Home Team`[eastvwest],simSeason$`Away Team`[eastvwest]) %in% get(teamconf)
simSeason$Winner[eastvwest]
View(simSeason)
eastvwest
simSeason$`Home Team`[eastvwest]
simSeason$`Away Team`[eastvwest]
simSeason$`Away Team`[eastvwest] %in% get(teamconf)
if (simSeason$`Home Team`[eastvwest] %in% get(teamconf)) {
simSeason$Winner <- simSeason$`Home Team`
}
simSeason$`Home Team`[eastvwest] %in% get(teamconf)
which(simSeason$`Home Team`[eastvwest] %in% get(teamconf))
simSeason$Winner[which(simSeason$`Home Team`[eastvwest] %in% get(teamconf))] <- simSeason$`Home Team`
simSeason$Winner[which(simSeason$`Home Team`[eastvwest] %in% get(teamconf))] <-
simSeason$`Home Team`[which(simSeason$`Home Team`[eastvwest] %in% get(teamconf))]
View(simSeason)
teamconf <- teams$Conference_id[which(teams$Team_Name == teamName)]
# subset the games where a team in the same conference is playing
simSeason <- subset(games,(games$Date > currentDay) & (games$`Home Team` %in% get(teamconf) |
games$`Away Team` %in% get(teamconf)))
View(simSeason)
simSeason$Winner[which(simSeason$`Home Team` == teamName | simSeason$`Away Team` == teamName)] <- teamName
View(simSeason)
eastvwest <- which((simSeason$`Home Team` %in% East & simSeason$`Away Team` %in% West) |
(simSeason$`Home Team` %in% West & simSeason$`Away Team` %in% East))
eastvwest
View(simSeason)
simSeason$Winner[which(simSeason$`Home Team`[eastvwest] %in% get(teamconf))] <-
simSeason$`Away Team`[which(simSeason$`Home Team`[eastvwest] %in% get(teamconf))]
View(simSeason)
East
View(simSeason)
simSeason$`Home Team`[eastvwest] %in% get(teamconf)
rm(simSeason)
simSeason <- subset(games,(games$Date > currentDay) & (games$`Home Team` %in% get(teamconf) |
games$`Away Team` %in% get(teamconf)))
simSeason$Winner[which(simSeason$`Home Team` == teamName | simSeason$`Away Team` == teamName)] <- teamName
#games b/w conferences
eastvwest <- which((simSeason$`Home Team` %in% East & simSeason$`Away Team` %in% West) |
(simSeason$`Home Team` %in% West & simSeason$`Away Team` %in% East))
simSeason$Winner[eastvwest[which(simSeason$`Home Team`[eastvwest] %in% get(teamconf))]] <-
simSeason$`Away Team`[eastvwest[which(simSeason$`Home Team`[eastvwest] %in% get(teamconf))]]
View(simSeason)
simSeason$Winner[eastvwest[which(simSeason$`Away Team`[eastvwest] %in% get(teamconf))]] <-
simSeason$`Home Team`[eastvwest[which(simSeason$`Home Team`[eastvwest] %in% get(teamconf))]]
View(simSeason)
simSeason$Winner[eastvwest[which(simSeason$`Away Team`[eastvwest] %in% get(teamconf))]] <-
simSeason$`Home Team`[eastvwest[which(simSeason$`Away Team`[eastvwest] %in% get(teamconf))]]
View(simSeason)
View(simSeason)
#divisions
divisions <- list("Atlantic" = as.vector(subset(teams$Team_Name,teams$Division_id=="Atlantic")),
"Central" = as.vector(subset(teams$Team_Name,teams$Division_id=="Central")),
"Southeast" = as.vector(subset(teams$Team_Name,teams$Division_id=="Southeast")),
"Northwest" = as.vector(subset(teams$Team_Name,teams$Division_id=="NOrthwest")),
"Pacific" = as.vector(subset(teams$Team_Name,teams$Division_id=="Pacific")),
"Southwest" = as.vector(subset(teams$Team_Name,teams$Division_id=="Southwest")))
rm(list=ls())
install.packages("readxl")
#install.packages("readxl")
require(readxl)
#initialize data frame to hold team information
teams <- read_xlsx("Analytics_Attachment.xlsx", sheet = 1)
teams$wins <- 0
teams$losses <- 0
teams$ptdiff <- 0
teams$cwins <- 0
teams$closses <- 0
teams$dwins <- 0
teams$dlosses <- 0
#pull in game information
games <- read_xlsx("Analytics_Attachment.xlsx", sheet = 2)
games$Date <- as.Date(games$Date)
gamedays <- unique(games$Date)
currentDay <- gamedays[1]
#update teams matrix with information from game day (need to update with cwins/closses/dwins/dlosses)
tallyScores <- function(currentDay) {
resultsToday <- subset(games, games$Date == currentDay)
for (game in 1:dim(resultsToday)[1]) {
if (resultsToday$Winner[game] == "Home") {
winner <- resultsToday$`Home Team`[game]
loser <- resultsToday$`Away Team`[game]
spread <- resultsToday$`Home Score`[game] - resultsToday$`Away Score`[game]
} else {
winner <- resultsToday$`Away Team`[game]
loser <- resultsToday$`Home Team`[game]
spread <- resultsToday$`Away Score`[game] - resultsToday$`Home Score`[game]
}
windex <- which(teams$Team_Name == winner)
lindex <- which(teams$Team_Name == loser)
#assign wins, losses, and ptdiff to the global teams df
teams$wins[windex] <<- teams$wins[windex] + 1
teams$ptdiff[windex] <<- teams$ptdiff[windex] + spread
teams$losses[lindex] <<- teams$losses[lindex] + 1
teams$ptdiff[lindex] <<- teams$ptdiff[lindex] - spread
}
}
#advance the game date
advanceDay <- function() {
gamesToday <- games[which(games$Date == currentDay)]
currentDay <- gamedays[which(gamedays == currentDay)+1]
}
#conferences
confs <- list("East" = as.vector(subset(teams$Team_Name,teams$Conference_id=="East")),
"West" = as.vector(subset(teams$Team_Name,teams$Conference_id=="West")))
#divisions
divisions <- list("Atlantic" = as.vector(subset(teams$Team_Name,teams$Division_id=="Atlantic")),
"Central" = as.vector(subset(teams$Team_Name,teams$Division_id=="Central")),
"Southeast" = as.vector(subset(teams$Team_Name,teams$Division_id=="Southeast")),
"Northwest" = as.vector(subset(teams$Team_Name,teams$Division_id=="NOrthwest")),
"Pacific" = as.vector(subset(teams$Team_Name,teams$Division_id=="Pacific")),
"Southwest" = as.vector(subset(teams$Team_Name,teams$Division_id=="Southwest")))
#test teamName
teamName <- teams$Team_Name[13]
#We probs want to initialize a best case scenario for each team and then update that with what changes
#   due to how actual results play out... but we always know that they want to
# win out
# have everyone in their conference lose to the other conference
# have everyone in their division lose to teams outside of it
# winner for games in same division is the team with the worse record of the pair... (this will be tricky)
# can't rule a team out on pt differential
#want to store each bestcase scenario in a giant list for the teams
#initial simulation of best case s
teamconf <- teams$Conference_id[which(teams$Team_Name == teamName)]
#subset the games where a team in the same conference is playing
if (teamconf == "East") {
simSeason <- subset(games,(games$Date > currentDay) & (games$`Home Team` %in% confs$East |
games$`Away Team` %in% confs$East))
} else {
simSeason <- subset(games,(games$Date > currentDay) & (games$`Home Team` %in% confs$West |
games$`Away Team` %in% confs$West))
}
#current team wins out
simSeason$Winner[which(simSeason$`Home Team` == teamName | simSeason$`Away Team` == teamName)] <- teamName
#games b/w conferences
outconfs <- which((simSeason$`Home Team` %in% confs$East & simSeason$`Away Team` %in% confs$West) |
(simSeason$`Home Team` %in% confs$West & simSeason$`Away Team` %in% confs$East))
#team conference loses out to the other conference
if (teamconf == "East") {
simSeason$Winner[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs$East)]] <-
simSeason$`Away Team`[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs$East)]]
simSeason$Winner[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs$East)]] <-
simSeason$`Home Team`[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs$East)]]
} else {
simSeason$Winner[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs$West)]] <-
simSeason$`Away Team`[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs$West)]]
simSeason$Winner[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs$West)]] <-
simSeason$`Home Team`[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs$West)]]
}
simSeason
games
teams
View(teams)
require(magrittr)
require(dpylr)
require(dplyr)
require(magrittr)
uire(dplyr)
require(dplyr)
checkPlayoffTeams <- function(teams) {
teams %>% arrange(Conference_id, desc(wins), desc(dwins), desc(cwins))
}
checkPlayoffTeams(teams)
teams_copy <- teams
teams_copy %>% filter(Conference_id == teamConf) %>% arrange(desc(wins),desc(dwins),desc(cwins))
teams_copy %>% filter(Conference_id == "East") %>% arrange(desc(wins),desc(dwins),desc(cwins))
teams_copy <- teams %>% filter(Conference_id == "East") %>% arrange(desc(wins),desc(dwins),desc(cwins))
View(teams_copy)
#remember to set your working directory & install the "readxl" package
#install.packages(c("readxl","magrittr","dplyr")
require(readxl)
require(magrittr)
require(dplyr)
#initialize data frame to hold team information
teams <- read_xlsx("Analytics_Attachment.xlsx", sheet = 1)
teams$wins <- 0
teams$losses <- 0
teams$ptdiff <- 0
teams$cwins <- 0
teams$closses <- 0
teams$dwins <- 0
teams$dlosses <- 0
#pull in game information
games <- read_xlsx("Analytics_Attachment.xlsx", sheet = 2)
games$Date <- as.Date(games$Date)
gamedays <- unique(games$Date)
currentDay <- gamedays[1]
eliminations <- read_xlsx("Analytics_Attachment.xlsx",sheet=3)
eliminations$`Date Eliminated` = ""
#update teams matrix with information from game day (need to update with cwins/closses/dwins/dlosses)
tallyScores <- function(currentDay) {
resultsToday <- subset(games, games$Date == currentDay)
for (game in 1:dim(resultsToday)[1]) {
if (resultsToday$Winner[game] == "Home") {
winner <- resultsToday$`Home Team`[game]
loser <- resultsToday$`Away Team`[game]
spread <- resultsToday$`Home Score`[game] - resultsToday$`Away Score`[game]
} else {
winner <- resultsToday$`Away Team`[game]
loser <- resultsToday$`Home Team`[game]
spread <- resultsToday$`Away Score`[game] - resultsToday$`Home Score`[game]
}
windex <- which(teams$Team_Name == winner)
lindex <- which(teams$Team_Name == loser)
#assign wins, losses, and ptdiff to the global teams df
teams$wins[windex] <<- teams$wins[windex] + 1
teams$ptdiff[windex] <<- teams$ptdiff[windex] + spread
teams$losses[lindex] <<- teams$losses[lindex] + 1
teams$ptdiff[lindex] <<- teams$ptdiff[lindex] - spread
}
}
#advance the game date
advanceDay <- function() {
gamesToday <- games[which(games$Date == currentDay)]
currentDay <- gamedays[which(gamedays == currentDay)+1]
}
#conferences
confs <- list("East" = as.vector(subset(teams$Team_Name,teams$Conference_id=="East")),
"West" = as.vector(subset(teams$Team_Name,teams$Conference_id=="West")))
#divisions
divisions <- list("Atlantic" = as.vector(subset(teams$Team_Name,teams$Division_id=="Atlantic")),
"Central" = as.vector(subset(teams$Team_Name,teams$Division_id=="Central")),
"Southeast" = as.vector(subset(teams$Team_Name,teams$Division_id=="Southeast")),
"Northwest" = as.vector(subset(teams$Team_Name,teams$Division_id=="NOrthwest")),
"Pacific" = as.vector(subset(teams$Team_Name,teams$Division_id=="Pacific")),
"Southwest" = as.vector(subset(teams$Team_Name,teams$Division_id=="Southwest")))
#test teamName
teamName <- teams$Team_Name[13]
teamconf <- teams$Conference_id[which(teams$Team_Name == teamName)]
teamdiv <- teams$Division_id[which(teams$Team_Name == teamName)]
#subset the games where a team in the same conference is playing
simSeason <- subset(games,(games$Date > currentDay) & (games$`Home Team` %in% confs[[teamconf]] |
games$`Away Team` %in% confs[[teamconf]]))
#games b/w your division and other divisions
outdivs <- which((simSeason$`Home Team` %in% divisions[[teamdiv]]))
#teams in your conference lose to other divisions
simSeason$Winner[outdivs[which(simSeason$`Home Team`[outdivs] %in% divisions[[teamdiv]])]] <-
simSeason$`Away Team`[outdivs[which(simSeason$`Home Team`[outdivs] %in% divisions[[teamdiv]])]]
simSeason$Winner[outdivs[which(simSeason$`Away Team`[outdivs] %in% divisions[[teamdiv]])]] <-
simSeason$`Home Team`[outdivs[which(simSeason$`Away Team`[outdivs] %in% divisions[[teamdiv]])]]
#games b/w conferences
outconfs <- which((simSeason$`Home Team` %in% confs$East & simSeason$`Away Team` %in% confs$West) |
(simSeason$`Home Team` %in% confs$West & simSeason$`Away Team` %in% confs$East))
#team conference loses out to the other conference
simSeason$Winner[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs[[teamconf]])]] <-
simSeason$`Away Team`[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs[[teamconf]])]]
simSeason$Winner[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs[[teamconf]])]] <-
simSeason$`Home Team`[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs[[teamconf]])]]
#current team wins out
simSeason$Winner[which(simSeason$`Home Team` == teamName | simSeason$`Away Team` == teamName)] <- teamName
#games b/w teams in other conferences
othergames <- which(simSeason$Winner == "Home" | simSeason$Winner == "Away")
}
teamconf <- teams$Conference_id[which(teams$Team_Name == teamName)]
teamdiv <- teams$Division_id[which(teams$Team_Name == teamName)]
#subset the games where a team in the same conference is playing
simSeason <- subset(games,(games$Date > currentDay) & (games$`Home Team` %in% confs[[teamconf]] |
games$`Away Team` %in% confs[[teamconf]]))
#games b/w your division and other divisions
outdivs <- which((simSeason$`Home Team` %in% divisions[[teamdiv]]))
#teams in your conference lose to other divisions
simSeason$Winner[outdivs[which(simSeason$`Home Team`[outdivs] %in% divisions[[teamdiv]])]] <-
simSeason$`Away Team`[outdivs[which(simSeason$`Home Team`[outdivs] %in% divisions[[teamdiv]])]]
simSeason$Winner[outdivs[which(simSeason$`Away Team`[outdivs] %in% divisions[[teamdiv]])]] <-
simSeason$`Home Team`[outdivs[which(simSeason$`Away Team`[outdivs] %in% divisions[[teamdiv]])]]
#games b/w conferences
outconfs <- which((simSeason$`Home Team` %in% confs$East & simSeason$`Away Team` %in% confs$West) |
(simSeason$`Home Team` %in% confs$West & simSeason$`Away Team` %in% confs$East))
#team conference loses out to the other conference
simSeason$Winner[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs[[teamconf]])]] <-
simSeason$`Away Team`[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs[[teamconf]])]]
simSeason$Winner[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs[[teamconf]])]] <-
simSeason$`Home Team`[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs[[teamconf]])]]
#current team wins out
simSeason$Winner[which(simSeason$`Home Team` == teamName | simSeason$`Away Team` == teamName)] <- teamName
#games b/w teams in other conferences
othergames <- which(simSeason$Winner == "Home" | simSeason$Winner == "Away")
teams_copy <- teams %>% filter(Conference_id == teamConf) %>% arrange(desc(wins),desc(dwins),desc(cwins))
View(eliminations)
teamsCopy <- teams %>% filter(Conference_id == "East") %>% arrange(desc(wins),desc(dwins),desc(cwins))
cutoff <- teamsCopy[8,4]
teamsCopy %>% filter(wins >= cutoff) -> teamsCopy
View(teamsCopy)
View(simSeason)
View(games)
teamGames <- games %>% filter(Date <= gamedays[2])
View(teamGames)
team1 <- "Miami Heat"
team2 <- "Boston Celtics"
teamGames <- games %>% filter(Date <= gamesdays[162],(`Home Team`==team1 & `Away Team`==team2)|(`Home Team`==team2 & `Away Team`==team1))
teamGames <- games %>% filter(Date <= gamedays[162],(`Home Team`==team1 & `Away Team`==team2)|(`Home Team`==team2 & `Away Team`==team1))
View(teamGames)
View(teamGames)
criteria1
teamGames
teamGames[1]
teamGames[,1]
teamGames[1,]
teamGames[2,]
teamGames[2,]$`Home Team`
teamGames[2,]$`Home Team` == "Miami Heat"
teamsCopy$Team_Name
teamsCopy$Team_Name[1,7]
teamsCopy$Team_Name[1:7]
c(teamsCopy$Team_Name[1:7],teamsCopy$Team_Name[8])
View(simSeason)
teamconf <- teams$Conference_id[which(teams$Team_Name == teamName)]
teamdiv <- teams$Division_id[which(teams$Team_Name == teamName)]
#subset the games where a team in the same conference is playing
simSeason <- subset(games,(games$Date > currentDay) & (games$`Home Team` %in% confs[[teamconf]] |
games$`Away Team` %in% confs[[teamconf]]))
#games b/w your division and other divisions
outdivs <- which((simSeason$`Home Team` %in% divisions[[teamdiv]]))
#teams in your conference lose to other divisions
simSeason$Winner[outdivs[which(simSeason$`Home Team`[outdivs] %in% divisions[[teamdiv]])]] <-
simSeason$`Away Team`[outdivs[which(simSeason$`Home Team`[outdivs] %in% divisions[[teamdiv]])]]
simSeason$Winner[outdivs[which(simSeason$`Away Team`[outdivs] %in% divisions[[teamdiv]])]] <-
simSeason$`Home Team`[outdivs[which(simSeason$`Away Team`[outdivs] %in% divisions[[teamdiv]])]]
#games b/w conferences
outconfs <- which((simSeason$`Home Team` %in% confs$East & simSeason$`Away Team` %in% confs$West) |
(simSeason$`Home Team` %in% confs$West & simSeason$`Away Team` %in% confs$East))
#team conference loses out to the other conference
simSeason$Winner[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs[[teamconf]])]] <-
simSeason$`Away Team`[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs[[teamconf]])]]
simSeason$Winner[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs[[teamconf]])]] <-
simSeason$`Home Team`[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs[[teamconf]])]]
#current team wins out
simSeason$Winner[which(simSeason$`Home Team` == teamName | simSeason$`Away Team` == teamName)] <- teamName
#games b/w teams in other divisions that are in you
othergames <- which(simSeason$Winner == "Home" | simSeason$Winner == "Away")
View(simSeason)
divisions
typeof(divisions)
divisions["LA Clippers"]
divisions$Southeast
games
games %>% slice(1)$Date
games %>% slice(1) %>% .%Date
games %>% slice(1) %>% .$Date
teams
games %>% slice(1) %>% .$`Home Score`
teamconf <- teams$Conference_id[which(teams$Team_Name == teamName)]
teamdiv <- teams$Division_id[which(teams$Team_Name == teamName)]
#subset the games where a team in the same conference is playing
simSeason <- subset(games,(games$Date > currentDay) & (games$`Home Team` %in% confs[[teamconf]] |
games$`Away Team` %in% confs[[teamconf]]))
#games b/w your division and other divisions
outdivs <- which((simSeason$`Home Team` %in% divisions[[teamdiv]]))
#teams in your conference lose to other divisions
simSeason$Winner[outdivs[which(simSeason$`Home Team`[outdivs] %in% divisions[[teamdiv]])]] <-
simSeason$`Away Team`[outdivs[which(simSeason$`Home Team`[outdivs] %in% divisions[[teamdiv]])]]
simSeason$Winner[outdivs[which(simSeason$`Away Team`[outdivs] %in% divisions[[teamdiv]])]] <-
simSeason$`Home Team`[outdivs[which(simSeason$`Away Team`[outdivs] %in% divisions[[teamdiv]])]]
#games b/w conferences
outconfs <- which((simSeason$`Home Team` %in% confs$East & simSeason$`Away Team` %in% confs$West) |
(simSeason$`Home Team` %in% confs$West & simSeason$`Away Team` %in% confs$East))
#team conference loses out to the other conference
simSeason$Winner[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs[[teamconf]])]] <-
simSeason$`Away Team`[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs[[teamconf]])]]
simSeason$Winner[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs[[teamconf]])]] <-
simSeason$`Home Team`[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs[[teamconf]])]]
#current team wins out
simSeason$Winner[which(simSeason$`Home Team` == teamName | simSeason$`Away Team` == teamName)] <- teamName
#games b/w teams in other divisions that are in you
othergames <- which(simSeason$Winner == "Home" | simSeason$Winner == "Away")
#remember to set your working directory & install the "readxl" package
#install.packages(c("readxl","magrittr","dplyr")
library(readxl)
library(magrittr)
library(dplyr)
#initialize data frame to hold team information
teams <- read_xlsx("Analytics_Attachment.xlsx", sheet = 1)
teams$wins <- 0
teams$losses <- 0
teams$ptdiff <- 0
teams$cwins <- 0
teams$closses <- 0
teams$dwins <- 0
teams$dlosses <- 0
#pull in game information
games <- read_xlsx("Analytics_Attachment.xlsx", sheet = 2)
games$Date <- as.Date(games$Date)
gamedays <- unique(games$Date)
currentDay <- gamedays[1]
#set winner to be the team name
hdex <- which(games$Winner == "Home")
adex <- which(games$Winner == "Away")
games$Winner[hdex] <- games$`Home Team`[hdex]
games$Winner[adex] <- games$`Away Team`[adex]
rm(adex,hdex)
eliminations <- read_xlsx("Analytics_Attachment.xlsx",sheet=3)
eliminations$`Date Eliminated` = "Playoffs"
#update teams matrix with information from game day (need to update with cwins/closses/dwins/dlosses)
tallyScores <- function(currentDay) {
resultsToday <- subset(games, games$Date == currentDay)
for (game in 1:dim(resultsToday)[1]) {
if (resultsToday$Winner[game] == resultsToday$`Home Team`[game]) {
winner <- resultsToday$`Home Team`[game]
loser <- resultsToday$`Away Team`[game]
spread <- resultsToday$`Home Score`[game] - resultsToday$`Away Score`[game]
} else {
winner <- resultsToday$`Away Team`[game]
loser <- resultsToday$`Home Team`[game]
spread <- resultsToday$`Away Score`[game] - resultsToday$`Home Score`[game]
}
windex <- which(teams$Team_Name == winner)
lindex <- which(teams$Team_Name == loser)
#assign wins, losses, and ptdiff to the global teams df
teams$wins[windex] <<- teams$wins[windex] + 1
teams$ptdiff[windex] <<- teams$ptdiff[windex] + spread
teams$losses[lindex] <<- teams$losses[lindex] + 1
teams$ptdiff[lindex] <<- teams$ptdiff[lindex] - spread
}
}
#advance the game date
advanceDay <- function() {
gamesToday <- games[which(games$Date == currentDay)]
currentDay <- gamedays[which(gamedays == currentDay)+1]
}
#conferences
confs <- list("East" = as.vector(subset(teams$Team_Name,teams$Conference_id=="East")),
"West" = as.vector(subset(teams$Team_Name,teams$Conference_id=="West")))
#divisions
divisions <- list("Atlantic" = as.vector(subset(teams$Team_Name,teams$Division_id=="Atlantic")),
"Central" = as.vector(subset(teams$Team_Name,teams$Division_id=="Central")),
"Southeast" = as.vector(subset(teams$Team_Name,teams$Division_id=="Southeast")),
"Northwest" = as.vector(subset(teams$Team_Name,teams$Division_id=="NOrthwest")),
"Pacific" = as.vector(subset(teams$Team_Name,teams$Division_id=="Pacific")),
"Southwest" = as.vector(subset(teams$Team_Name,teams$Division_id=="Southwest")))
#test teamName
teamName <- teams$Team_Name[13]
teamconf <- teams$Conference_id[which(teams$Team_Name == teamName)]
teamdiv <- teams$Division_id[which(teams$Team_Name == teamName)]
#subset the games where a team in the same conference is playing
simSeason <- subset(games,(games$Date > currentDay) & (games$`Home Team` %in% confs[[teamconf]] |
games$`Away Team` %in% confs[[teamconf]]))
#games b/w your division and other divisions
outdivs <- which((simSeason$`Home Team` %in% divisions[[teamdiv]]))
#teams in your conference lose to other divisions
simSeason$Winner[outdivs[which(simSeason$`Home Team`[outdivs] %in% divisions[[teamdiv]])]] <-
simSeason$`Away Team`[outdivs[which(simSeason$`Home Team`[outdivs] %in% divisions[[teamdiv]])]]
simSeason$Winner[outdivs[which(simSeason$`Away Team`[outdivs] %in% divisions[[teamdiv]])]] <-
simSeason$`Home Team`[outdivs[which(simSeason$`Away Team`[outdivs] %in% divisions[[teamdiv]])]]
#games b/w conferences
outconfs <- which((simSeason$`Home Team` %in% confs$East & simSeason$`Away Team` %in% confs$West) |
(simSeason$`Home Team` %in% confs$West & simSeason$`Away Team` %in% confs$East))
#team conference loses out to the other conference
simSeason$Winner[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs[[teamconf]])]] <-
simSeason$`Away Team`[outconfs[which(simSeason$`Home Team`[outconfs] %in% confs[[teamconf]])]]
simSeason$Winner[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs[[teamconf]])]] <-
simSeason$`Home Team`[outconfs[which(simSeason$`Away Team`[outconfs] %in% confs[[teamconf]])]]
#current team wins out
simSeason$Winner[which(simSeason$`Home Team` == teamName | simSeason$`Away Team` == teamName)] <- teamName
#games b/w teams in other divisions that are in you
othergames <- which(simSeason$Winner == "Home" | simSeason$Winner == "Away")
View(teams)
View(games)
View(simSeason)
View(simSeason)
View(simSeason)
View(games)
View(simSeason)
View(games)
View(simSeason)
View(games)
View(simSeason)
games %>% slice(1)
games
games %>% filter(`Home Score` >= 100 | `Away Score` >= 100) %>% n()
games %>% filter(`Home Score` >= 100 | `Away Score` >= 100) %>% nrows()
games %>% filter(`Home Score` >= 100 | `Away Score` >= 100)
nrows(games %>% filter(`Home Score` >= 100 | `Away Score` >= 100))
nrow(games %>% filter(`Home Score` >= 100 | `Away Score` >= 100))
checkPlayoffTeams <- function(teams, teamName, teamConf, teamDiv, currentDate) {
teamsCopy <- teams %>% filter(Conference_id == teamConf) %>% arrange(desc(wins),desc(dwins),desc(cwins))
cutoff <- teamsCopy[8,4]
teamsCopy %>% filter(wins >= cutoff) -> teamsCopy
if (nrow(teamsCopy) == 8){
playoffTeams <- teamsCopy$Team_Name
return(playoffTeams)
}
if (nrow(teamsCopy) == 9 & teamsCopy[7,4] > cutoff) {
playoffTeams <- teamsCopy$Team_Name[1:7]
c(playoffTeams,twoTeamLogic(teams,teamsCopy[8,]$Team_Name,teamsCopy[9,]$Team_Name, currentDate, playoffTeams))
return(playoffTeams)
}
}
checkPlayoffTeams(teams, "Cleveland Cavaliers", "East", "Central", gamedays[162])
p <- checkPlayoffTeams(teams, "Cleveland Cavaliers", "East", "Central", gamedays[162])
View(teams)
rm(list = ls())
